doctype html
html(lang="en")
  include @/@loadingio/bootstrap.ext/dist/index.pug
  head(prefix="og: http://ogp.me/ns#")
    meta(charset="utf-8")
    meta(name='viewport', content='width=device-width, initial-scale=1.0, maximum-scale=1.0')
    title ldcolorpicker - Palette-Aware Color Picker
    +css("/assets/lib/bootstrap/main/css/bootstrap.min.css")
    +css("/assets/lib/@loadingio/bootstrap.ext/main/index.min.css")
    +css("/assets/lib/ldcolorpicker/dev/ldcp.css")
    +css("/css/index.css")

    +script("/assets/lib/bootstrap.native/main/bootstrap-native-v4.min.js")
    +script("/assets/lib/@loadingio/ldquery/main/ldq.min.js")
    +script("/assets/lib/ldcolor/main/ldcolor.min.js")
    +script("/assets/lib/ldcolorpicker/dev/ldcp.js")
    +script("//cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.min.js")
    +script("//cdnjs.cloudflare.com/ajax/libs/react/0.14.0/react.js")
    +script("//cdnjs.cloudflare.com/ajax/libs/react/0.14.0/react-dom.js")

  body(data-spy="scroll",data-target=".scrollspy",ng-app="main",ng-controller="main")
    #landing
      .inner.text-center
        .row
          .col-sm-6
            .title ldcolorpicker 
            .brand by #[a(href="http://loading.io",target="_blank") loading.io]
            .subtitle 
              | Palette-Aware 
              span(data-toggle="ldcolorpicker",data-oncolorchange="this.style.color=color",
              data-classname="palette-only flat rounder shadow round-palette landing",data-pinned="true",data-context="landing")
                span(data-toggle="tooltip",data-placement="top",title="Let's Change Some Colors!") Color
              |  Picker 
          .col-sm-6
            .ldcolorpicker.round.shadow.flat.no-button.no-empty-color(data-palette="#ff1d00 #ffb651 #fff882 #80de40 #3c8df1 #923dd1",data-context="landing")
            br
    #landing-palettes.text-center(style="margin-top:-16px")
      .ldcolorpicker.mini-palette.shadow.no-ptr.flat(data-palette="#514134 #e35839 #d28d4f #dbae1d #477187 #323a3f",data-context="landing1",onclick="setpalette('landing1')")
      .ldcolorpicker.mini-palette.shadow.no-ptr.flat(data-palette="#F5542E #F2C327 #008B6E #00AEDE #0067AD",data-context="landing2",onclick="setpalette('landing2')")
      .ldcolorpicker.palette-only.compact-palette.shadow.no-ptr.flat.rounder(data-context="landing",onclick="setpalette('landing')",style="width:200px")
      .ldcolorpicker.mini-palette.shadow.no-ptr.flat(data-palette="#51CACC #9DF871 #E0FF77 #DE9DD6 #FF708E",data-context="landing3",onclick="setpalette('landing3')")
      .ldcolorpicker.mini-palette.shadow.no-ptr.flat(data-palette="#F29C98 #F5B697 #F5E797 #A2E4F5 #009DD3",data-context="landing4",onclick="setpalette('landing4')")
    #root
      .row
        .col-sm-8
          h2#overview Overview
          p #[b: i ldcolorpicker] is a Palette-aware color picker module with following features:
          ul
            li Load palette on the fly
            li Share palette across pickers
            li vanilla JS / jQuery / AngularJS / ReactJS compatible
            li highly configurable
            br
            .panel.panel-default: .panel-body
              .row
                .col-sm-6
                  .text-center 
                    div Tiny palette
                    .ldcolorpicker.palette-only.compact-palette.no-border.mini-palette.flat
                    br
                    br
                    br
                    div Circle Palette
                    .ldcolorpicker.palette-only.round-palette.middle.shadow
                .col-sm-6
                  .text-center 
                    div Default palette
                    .ldcolorpicker
              br

          h2#usage Usage
          p Download and include #[a(href="https://raw.githubusercontent.com/zbryikt/ldcolorpicker/master/dist/ldcp.min.js"): code ldcp.min.js] and #[a(href="https://raw.githubusercontent.com/zbryikt/ldcolorpicker/master/dist/ldcp.css"): code ldcp.css] file of ldcolorpicker:
          pre.well.
            &#60;link rel="stylesheet" type="text/css" href="ldcp.css"/&#62;
            &#60;script type="text/javascript" src="ldcp.js"&#62;&#60;/script&#62;

          p Add #[code data-toggle="ldcolorpicker"] in the input box you want to apply ldcolorpicker, e.g.:
          pre.well.
            &#60;input type="input" data-toggle="ldcolorpicker"&#62;
          p and initialize with following script:
          pre.well.
            &#60;script type="text/javascript"&#62;
              ldcolorpicker.init();
            &#60;/script&#62;
          p then you will have a input box like this:
          .panel.panel-default: .panel-body
            label click the input box
            input.form-control(data-toggle="ldcolorpicker")
          br

          h3#element-type Different Types of Element
          p It's possible to trigger color picker with elements other than input box; for example, a button or link:
          pre.well.
            &#60;button data-toggle="ldcolorpicker"&#62; Toggle &#60;/button&#62;
            &#60;a href="#" data-toggle="ldcolorpicker"&#62; Toggle &#60;/a&#62;
          p Here is an example of button-triggered color picker:
          .card: .card-body
            .btn.btn-lg.btn-outline-secondary(data-toggle="ldcolorpicker",data-classname="round shadow") Toggle
            a.btn.btn-link(data-toggle="ldcolorpicker",data-classname="round shadow") Toggle
          br
          h2#config Configuration
          p It's possible to configure color picker widget with attributes of HTML tags. Let's take a look of what can be done.
          br
          h3#styling Styling
          p Use #[code data-classname] to config color picker style:
          .row
            .col-sm-4: form.form: .form-group
                label data-classname="no-border"
                input.form-control(data-toggle="ldcolorpicker",data-classname="no-border")
            .col-sm-4: form.form: .form-group
                label data-classname="shadow"
                input.form-control(data-toggle="ldcolorpicker",data-classname="shadow")
            .col-sm-4: form.form: .form-group
                label data-classname="round"
                input.form-control(data-toggle="ldcolorpicker",data-classname="round")
          p #[code data-classname] will be applied to the class of ldcolorpicker's root element, so you can use it add your own customization to ldcolorpicker. For example:
          pre.well.
            &#60;style type="text/css"&#62;
              .ldcolorpicker.mystyle { background: #f00 }
            &#60;/style&#62;
            &#60;input type="text" data-toggle="ldcolorpicker" data-classname="mystyle"&#62;
          p ldcolorpicker provides several default decorating class:
          table.table.table-bordered
            thead
              tr
                th class
                th description
            tbody
              tr
                td shadow
                td Render shadow around the widget
              tr
                td no-border
                td hide the border around the widget
              tr
                td round
                td make the border round
              tr
                td rounder
                td make the border rounder
              tr
                td top / right / bottom / left
                td set the direction in which color pick widget will popup
              tr
                td palette-only
                td show palette only. not editable for user
              tr
                td compact-palette
                td a small palette with no margin between palette colors
              tr
                td round-palette
                td use circle for palette colors
              tr
                td flat
                td flat style color picker widget
              tr
                td no-empty-color
                td hide the "none" color button
              tr
                td no-button
                td hide buttons ( add / remove / edit colors buttons )
              tr
                td no-palette
                td hide palette
              tr
                td no-alpha
                td hide slider for alpha ( opacity ) value
              tr
                td no-ptr
                td hide pointer of palette
              tr
                td text-input
                td show input box for directly input
          br
          hr
          h3#style-example Styling Example
          p 
            span Here are examples you can use as a start point. First Begins with 
            code &#60;div class="ldcolorpicker 
            span , and followed by ...
          #examples
            .row.text-center
              .col-sm-4.text-center
                code flat text-input
                .ldcolorpicker.flat.text-input
              .col-sm-4.text-center
                code shadow no-border
                .ldcolorpicker.shadow.no-border
              .col-sm-4.text-center
                code no-palette
                .ldcolorpicker.no-palette
            .row.text-center
              .col-sm-6.text-center
                code flat compact-palette no-border no-button
                .ldcolorpicker.flat.compact-palette.no-border.no-button
              .col-sm-6.text-center
                code no-alpha no-button no-empty-color
                .ldcolorpicker.no-alpha.no-button.no-empty-color
            br
            p with #[code palette-only flat] :
            .row.text-center
              .col-sm-4.text-center.px-4
                code round-palette
                .ldcolorpicker.palette-only.flat.round-palette.w-100
              .col-sm-4.text-center.px-4
                code compact-palette
                .ldcolorpicker.palette-only.compact-palette.flat.w-100
              .col-sm-4.text-center.px-4
                code mini-palette no-ptr
                .ldcolorpicker.palette-only.mini-palette.flat.no-ptr.w-100
          br
          hr
          br
          h3#readonly-mode Readonly Mode
          p You can use #[code data-classname="palette-only"] to constrain user to only choose colors from your palette:
          pre.well.
            &#60;input type="text data-toggle="ldcolorpicker" data-classname="palette-only"&#62;
          .panel.panel-default: .panel-body
            .row
              .col-sm-8
                input.form-control(type="text",data-toggle="ldcolorpicker",data-classname="palette-only",data-oncolorchange="document.getElementById('palette-only-btn').style.background=ldcolor.web(color)")
              .col-sm-4
                .btn.btn-outline-dark.btn-block(style="padding:6px")
                  #palette-only-btn(style="width:100%;height:100%;background:#f00") &nbsp;
          p In fact, what #[code palette-only] do is hiding some elements by CSS rules. It's possible to configure the color picker widget by overwriting its CSS rules. Check the DOM structure of the widget if you want to make your own configuration.

          br
          h3#share-palette Share Palette
          p By default, every color picker shares the same palette. Change to color of palette will affect every input box that uses this palette. Try changing color in one of the input box below:
          .row
            .col-sm-6: form.form: .form-group: input.form-control(type="text",data-toggle="ldcolorpicker",data-classname="border round shadow")
            .col-sm-6: form.form: .form-group: input.form-control(type="text",data-toggle="ldcolorpicker",data-classname="border round shadow")
          p You can force input boxes to use different palettes by giving them a different context with #[code data-context]:
          pre.well.
            &#60;input type="text" data-toggle="ldcolorpicker" data-context="palette1"&#62;
            &#60;input type="text" data-toggle="ldcolorpicker" data-context="palette2"&#62;
          p With above configuration, input box will have their own context. Try changing color in one of the input box below again, this time input box will not affect each other:
          .row
            .col-sm-6: form.form: .form-group: input.form-control(type="text",data-toggle="ldcolorpicker",data-classname="border round shadow",data-context="palette1")
            .col-sm-6: form.form: .form-group: input.form-control(type="text",data-toggle="ldcolorpicker",data-classname="border round shadow",data-context="palette2")
          p Sometimes it's useful to have a randomly named context; in this case, use 'random' as the context name: 
          pre.well.
            &#60;input type="text" data-toggle="ldcolorpicker" data-context="#[b random]"&#62;
            &#60;input type="text" data-toggle="ldcolorpicker" data-context="#[b random]"&#62;
            &#60;input type="text" data-toggle="ldcolorpicker" data-context="#[b random]"&#62;
            &#60;input type="text" data-toggle="ldcolorpicker" data-context="#[b random]"&#62;
          p Above input boxs will all have different context.

          h3#index-of-color Index of Color
          p By default, every color picker use the first color in a palette. we can use zero-based #[code data-idx] to change default index of color:
          pre.well.
            &#60;input type="text" data-toggle="ldcolorpicker" data-idx="2"&#62;
            &#60;input type="text" data-toggle="ldcolorpicker" data-idx="3"&#62;
          p the input boxes below use different slot of the palette, so changing one won't affect the other:
          .row
            .col-sm-6
              input.form-control(type="text",data-toggle="ldcolorpicker",data-idx="1")
            .col-sm-6
              input.form-control(type="text",data-toggle="ldcolorpicker",data-idx="2")
          br
          h3#predefined-palette Predefined Palette
          p You can set a predefined palette by setting #[code data-palette] attribute. It can be a space-separated hex codes, an array of hex code, or an URL:
          pre.well.
            &#60;input data-toggle="ldcolorpicker" data-palette="#ff0000 #00ff00 #0000f"&#62;
            &#60;input data-toggle="ldcolorpicker" data-palette="['#f0f000','#00f0f0','#f000f0']"&#62;
            &#60;input data-toggle="ldcolorpicker" data-palette="http:&#47;&#47;loading.io/palette/559087d71deb8c3a54548932"&#62;
          p will be like these:
          .panel.panel-default: .panel-body
            .row
              .col-sm-4
                input.form-control(type="text",data-toggle="ldcolorpicker",
                data-palette="#ff0000 #00ff00 #0000ff",data-context="predefined1",
                data-classname="round shadow",data-exclusive="true")
              .col-sm-4
                input.form-control(type="text",data-toggle="ldcolorpicker",
                data-palette='["#f0f000","#00f0f0","#f000f0"]',data-context="predefined2",
                data-classname="round shadow")
              .col-sm-4
                input.form-control(type="text",data-toggle="ldcolorpicker",
                data-palette="http://loading.io/palette/559087d71deb8c3a54548932",data-context="predefined3",
                data-classname="round shadow")
          p when using URL as predefined palette source, it should point to a URL which respond with a JSON file in following format:
          pre.well.
            {
              colors: [
                {hex: "#000000"}, &#47;&#47; represented in 6 digits hex code 
                {hex: "#000000"},
                ...
              ]
            }

          p Note that if multiple predefined palettes are given for the same context, only one of them will be used.
          br

          h3#event-handling Event Handling
          p use #[code data-oncolorchange] to handle color change event. For example, following code:
          pre.well.
            &#60;input data-toggle="ldcolorpicker" data-oncolorchange="this.style.color=color" data-classname="shadow round"&#62;
          p will lead to this:
          .panel.panel-default: .panel-body
            input.form-control(data-toggle="ldcolorpicker",data-oncolorchange="this.style.color=ldcolor.web(color)",
            data-classname="round shadow")

          p and use #[code data-onpalettechange] to handle palette change event:
          pre.well.
            &#60;input data-toggle="ldcolorpicker" data-onpalettechange="this.style.color=color" data-classname="shadow round"&#62;

          h2#apis APIs
          p ldcolorpicker provides APIs for vanilla JS, jQuery and AngularJS.
          h3#vanilla-js Vanilla JS
          p You can also intialize specific node with ldcolorpicker directly by JS:
          pre.well.
            new ldcolorpicker(document.getElementById("#some-inputbox"),{});
          p the second parameter is a config object with following options:
          table.table.table-bordered
            thead
              tr
                th option
                th description
            tbody
              tr
                td context
                td setup palette context
              tr
                td class
                td setup custom css class for color picker widget
              tr
                td oncolorchange
                td callback function that will be invoked when color is changed
              tr
                td onpalettechange
                td callback function that will be invoked when palette is changed
              tr
                td index
                td default index of color in palette
              tr
                td palette
                td default palette. Can be string, array of hex strings, or a object described in #[b Predefined Palette] section.
              tr
                td pinned
                td set to true is widget should be sticked and always popup.
              tr
                td exclusive
                td close all color pickers while this widget is opened.
          p an sample config object is like this:
          pre.well.
            {
              context: 'sample',
              class: 'round shadow',
              oncolorchange: function(color) { this.style.color = color; }
            }
          p you can access color information by the ldcolorpicker object, or by getAttribute of the element:
          pre.well.
            var node = document.getElementById("#some-node");

            /* Initialize Color Picker */
            var ldcp = new ldcolorpicker(node, {});

            /* Retrieve color */
            var color = node.getAttribute("data-color");
            color = ldcp.getHexString();

            /* Retrieve index of this color in palette */
            var idx = node.getAttribute("data-idx");
            idx = ldcp.getIdx();

            /* Retrieve Palette */
            var palette = ldcp.getPalette();

          p listen to #[code change] event for color changing:
          pre.well.
            ldcp.on("change", function(color) {
              console.log(color);
            });
          p Following example shows a button change its color according to the value of color picker:
          pre.well.
            &#60;button id="btn-color"&#62;■&#60;/div&#62;
            &#60;script type="text/javascript"&#62;
            var node = document.getElementById("btn-color");
            var ldcp = new ldcolorpicker(node);
            ldcp.on("change",function(color) { node.style.color = ldcolor.web(color); });
            &#60;/script&#62;
          p Result will be like this:
          .panel.panel-default: .panel-body
            #btn-color.btn.btn-outline-dark ■
          p For those elements initialized by #[code data-toggle="ldcolorpicker"], you can retrieve their ldcolorpicker objects via #[code element.getColorPicker()] function:
          pre.well.
            &#60;input id="inputbox" type="text" data-toggle="ldcolorpicker"&#62;
            &#60;script type="text/javascript"&#62;
            var node = document.getElementById("inputbox");
            var ldcp = node.getColorPicker();
            &#60;/script&#62;

          p A summary of programming interface is as follow.
          br
          h4 Host Element

          table.table.table-bordered
            thead
              tr
                th property
                th description
            tbody
              tr
                td data-toggle
                td initialize a Color Picker for this element
              tr
                td data-classname
                td define additional CSS class for color picker widget.
              tr
                td data-context
                td define palette context for this element
              tr
                td data-palette
                td set default value of palette
              tr
                td data-idx
                td set/get default index of color in palette for this element
              tr
                td data-oncolorchange
                td callback function when color is changed. Access variable #[code color] for new value.
              tr
                td data-onpalettechange
                td callback function when palette is changed. Access variable #[code palette] for new value.
              tr
                td data-color
                td get value of current color
              tr
                td data-pinned
                td set to true if widget is pinned ( sticked and forced popup )
              tr
                td data-exclusive
                td set to true if opening this widget closes all other widget.
              tr: td(colspan="2")
            thead
              tr
                th method
                th description
            tbody
              tr
                td getColorPicker()
                td return ColorPicker object

          h4 ColorPicker Object
          table.table.table-bordered
            thead
              tr
                th method
                th description
            tbody
              tr
                td loadPalette(URL)
                td load palette from certain URL.
              tr
                td addColor()
                td randomly add a color in palette
              tr
                td removeColor()
                td remove a color from palette
              tr
                td edit()
                td open current palette in loading.io
              tr
                td on(event, callback)
                td 
                  span listen to #[code event] with #[code callback] as handler function.
                  span There are several differen events:
                  br
                  br
                  ul
                    li 
                      span #[code inited] - fired when color picked is initialized
                      pre.well(style="margin-top:10px").
                        obj.on("inited", function() { ... });
                    li 
                      span #[code change] - fired when color changed
                      pre.well(style="margin-top:10px").
                        obj.on("change", function(color) { ... });
                        /* color is hex, rgba or "none" */
                    li 
                      span #[code change-palette] - fired when palette changed
                      pre.well(style="margin-top:10px").
                        obj.on("change-palette", function(palette) { ... });
                    li 
                      span #[code change-idx] - fired when index of active color changed
                      pre.well(style="margin-top:10px").
                        obj.on("change-idx", function(idx) { ... });
                    li 
                      span #[code change-pin] - fired when pin state changed
                      pre.well(style="margin-top:10px").
                        obj.on("change-pin", function(isPinned) { ... });
                    li 
                      span #[code toggle] - fired when widget toggles on / off
                      pre.well(style="margin-top:10px").
                        obj.on("toggle", function(isOn) { ... });

              tr
                td toggle(isOn)
                td change color picker widget state. Calling without parameter will invert widget state. 
              tr
                td getPalette()
                td get palette
              tr
                td setPalette(obj)
                td set palette. Obj format is described in #[b Predefined Palette] section.
              tr
                td getIdx()
                td get index of active color in palette
              tr
                td setIdx()
                td set index of active color in palette
              tr
                td setHsl(hue, sat, lit)
                td set HSL for active color of palette
              tr
                td isPinned()
                td is widget pinned (sticked) and forced popup?
              tr
                td setPin(isPinned)
                td pin color picker widget
              tr
                td setColor(hex, alpha, isNone)
                td set active item in palette to color of hexString. alpha and isNone are optional.
              tr
                td setAlpha(alpha)
                td set alpha value
              tr
                td getAlpha()
                td get alpha value
          br
        //-
          h3#jquery jQuery
          p ldcolorpicker also provides jQuery interface to initialize and access color picker:
          pre.well.
            /* Initialize Color Picke */
            $("#some-node").ldcolorpicker({/* same config options with Vanilla JS */});

            /* Retrieve color */
            $("#some-node").ldcolorpicker().getHexString();

            /* Retrieve index of this color in palette */
            $("#some-node").ldcolorpicker().getIdx();

            /* Retrieve Palette */
            $(#some-node").ldcolorpicker().getPalette();
          p #[code $(...).ldcolorpicker()] returns a ColorPicker object, so you can check last section for interface of ColorPicker object.
          br
          h3#angularjs AngularJS
          p first, include #[code ldcolorpicker] module in your module:
          pre.well.
            angular.module("yourModule", ["ldcolorpicker"]);
          p then use #[code ldcolorpicker] directive to initialize ldColorpicker with AngularJS:
          pre.well.
            &#60;input ldcolorpicker ng-model="color" ng-ldcp="ldcp"&#62;
          p example using angularjs binding:
          .panel.panel-default: .panel-body.row
            .col-sm-4
              label choose color
              input.form-control(ldcolorpicker,ng-model="color",ng-ldcp="ldcp",ng-idx="idx",ng-pinned="pin",ng-palette="palette")
            .col-sm-4
              label your color
              .btn.btn-outline-dark.btn-block(ng-attr-style="background:{{color}};height:34px")
            .col-sm-4
              label Color Index
              br
              input.form-control(type="text",disabled,ng-model="idx")
          p you can build a two-way-binding of color, ColorPicker object and other state information to angular scope by following attributes:
          table.table.table-bordered
            thead
              tr
                th attribute
                th description
            tbody
              tr
                td ng-model
                td current color
              tr
                td ng-ldcp
                td ColorPicker object
              tr
                td ng-idx
                td index of active color in palette
              tr
                td ng-pinned
                td is widget pinned
              tr
                td ng-palette
                td palette of the colorpicker
          p to configure ColorPicker, use #[code config] attributes:
          pre.well.
            &#60;input ldcolorpicker config="someVar"&#62;
          br
          h3#reactjs ReactJS
          p use #[code &#60;ldcolorpicker&#62;] component to create color picker widget. All parameters in Vanilla JS can be used as properties in this component, e.g.:
          pre.well.
            ReactDOM.render(&#60;ldcolorpicker 
              palette="#ff0000 #0000ff" 
              class="palette-only round shadow"
              oncolorchange="document.getElementById('your-output').innerText=color"
              context="mycontext"
            /&#62;, document.getElementById("your-container");
          p will be like this:
          script(type="text/babel").
            ReactDOM.render(<ldcolorpicker 
              palette="#ff0000 #0000ff" 
              class="palette-only round shadow" 
              context="mycontext"
              oncolorchange="document.getElementById('react-output').innerText=color"
            />,document.getElementById("react-container"));
          .row
            .col-sm-8
              #react-container
            .col-sm-4
              #react-output
          br
          br
          br
        .col-sm-4.scrollspy
          .sticky
            .list-group
              .list-group-item: a(href="#overview") Overview
              .list-group-item: a(href="#usage") Usage
              .list-group-item: a(href="#config") Configurations
              .list-group-item: a(href="#apis") APIs
            //-ul.nav.hidden-xs.hidden-sm(data-spy="affix")
              li
                a(href="#overview") Overview &#xbb;
              li
                a(href="#usage") Usage &#xbb;
                ul.nav.subnav
                  li: a(href="#element-type") Different Types of Element
              li
                a(href="#config") Configuration &#xbb;
                ul.nav.subnav
                  li: a(href="#styling") Styling
                  li: a(href="#style-example") Styling Example
                  li: a(href="#readonly-mode") Readonly Mode
                  li: a(href="#share-palette") Share Palette
                  li: a(href="#index-of-color") Index of Color
                  li: a(href="#predefined-palette") Predefined Palette
                  li: a(href="#event-handling") Event Handling
              li
                a(href="#apis") APIs &#xbb;
                ul.nav.subnav
                  li: a(href="#vanilla-js") Vanilla JS
                  li: a(href="#jquery") jQuery
                  li: a(href="#angularjs") AngularJS
                  li: a(href="#reactjs") ReactJS
              li: a(style="background:none")
                iframe.pull-left(src="https://ghbtns.com/github-btn.html?user=zbryikt&repo=ldcolorpicker&type=star&size=large",frameborder="0",scrolling="0",width="160px",height="30px")

      #footer.py-3
        small ldcolorpicker v.2.0.3 &copy; #[a(href="http://loading.io",target="_blank") loading.io] released under MIT License
        small.pull-right
          a(href="http://zbryikt.github.io/ldcolorpicker",target="_blank") Github
          span ．
          a(href="https://github.com/zbryikt/ldcolorpicker/releases",target="_blank") Releases
          span ．
          a(href="http://loading.io/color/",target="_blank") Loading Colors
          span ．
          i.glyphicon.glyphicon-heart
    script: include:lsc index.ls
